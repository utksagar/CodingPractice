1
00:00:01,470 --> 00:00:05,370
A recursive qty has one query that references itself.

2
00:00:06,340 --> 00:00:13,300
They can enable you to process hierarchical data, in some cases, they can be used as alternatives

3
00:00:13,300 --> 00:00:15,220
to higher hierarchical queries.

4
00:00:16,120 --> 00:00:22,520
I mentioned in the Hierarchical Queries Lecture that my school does not permit hierarchical queries.

5
00:00:23,170 --> 00:00:31,120
Well, in that instance, recursive keys can be used to query the AMP table in a hierarchical way as

6
00:00:31,120 --> 00:00:32,020
an alternative.

7
00:00:33,440 --> 00:00:42,410
The syntax for Recursive Qty is as follows, you start by typing with followed by the qty name as per

8
00:00:42,410 --> 00:00:44,630
normal and specified the columns.

9
00:00:45,740 --> 00:00:47,360
You then have two queries.

10
00:00:48,110 --> 00:00:55,250
First, you have the anchor, the anchor clause sets the initial set of rules that are displayed at

11
00:00:55,250 --> 00:00:56,570
the top of the hierarchy.

12
00:00:57,860 --> 00:01:05,420
The anchor clause cannot reference the city itself, the anchor clause can be made up of said operators,

13
00:01:05,420 --> 00:01:08,590
including union miners and et cetera.

14
00:01:10,770 --> 00:01:21,450
You then must have a union all followed by the recursive clause of recursive clause, must reference

15
00:01:21,450 --> 00:01:22,290
the CTY.

16
00:01:24,860 --> 00:01:30,530
The recursive clause selects the next layer of the hierarchy based on the previous layer.

17
00:01:31,730 --> 00:01:35,210
The anchor ResultSet is the first layer.

18
00:01:36,890 --> 00:01:45,500
Aggregations, window functions, distinct clauses or devise limits are not allowed, you then apply

19
00:01:45,500 --> 00:01:49,850
a select statement and reference the CTY to obtain the results at.

20
00:01:50,890 --> 00:01:55,840
Now, I'll explain what happens in a recursive qty with some examples.

21
00:01:57,000 --> 00:02:02,850
Recursive RCTs will definitely take some getting used to, and you'll probably have to do a few examples

22
00:02:02,850 --> 00:02:04,270
before it becomes clear.

23
00:02:04,500 --> 00:02:06,270
So I want you to take your time with this.

24
00:02:09,230 --> 00:02:18,980
So in this query, the anchor query is to select empanel inane and manager from where the employee name

25
00:02:19,220 --> 00:02:21,140
is either Blake or clonk.

26
00:02:23,220 --> 00:02:26,320
So the table in the top right is the anchor table.

27
00:02:26,550 --> 00:02:29,350
This is the first iteration of the city.

28
00:02:29,730 --> 00:02:37,800
Now the recursive clause queries the AMP table, the same columns, employee name and manager.

29
00:02:38,890 --> 00:02:47,770
But in the unclosed, the recursive clause queries the city and is performing a joint to our emptywheel

30
00:02:47,950 --> 00:02:57,880
based on when that employee number of the anchor clause is equal to the manager or indeed of the employee

31
00:02:57,880 --> 00:02:58,480
table.

32
00:03:00,450 --> 00:03:09,450
So the anchor, which is the first iteration, is used to obtain the employee numbers from the CTY underscore,

33
00:03:09,570 --> 00:03:14,520
and so after this iteration, we return the following table.

34
00:03:15,720 --> 00:03:23,940
So this will be the result for all employees where their manager ID is that of Blake or clerk, the

35
00:03:23,940 --> 00:03:27,180
second table is then used in the next iteration.

36
00:03:27,360 --> 00:03:36,200
And now we're again looking for all employees where the manager it is either that of Alan's Ward's Martin's

37
00:03:36,220 --> 00:03:40,850
attorneys, James or Millar's, but none of these guys are managers.

38
00:03:41,010 --> 00:03:44,660
So that iteration stop and we've returned Oktay.

39
00:03:45,960 --> 00:03:52,530
And finally, we query the results of our city, which will be the combination of the two tables on

40
00:03:52,530 --> 00:03:52,920
the right.

41
00:03:56,050 --> 00:03:57,800
So let me go through another scenario.

42
00:03:59,320 --> 00:04:06,670
Let's say there's a table scale up on the school table, it holds one value, which is the number one

43
00:04:06,970 --> 00:04:09,900
in a column called NP, which stands for number.

44
00:04:10,090 --> 00:04:16,540
So the anchor query is going to return the following table, just a table with a column called N.

45
00:04:17,520 --> 00:04:19,410
With a scalar value of one in it.

46
00:04:20,380 --> 00:04:28,390
Now, the recursive clause will perform the iteration on the first anchor table, and it just adds one

47
00:04:28,720 --> 00:04:29,800
to the value of an.

48
00:04:31,310 --> 00:04:33,290
So then it will return to.

49
00:04:35,290 --> 00:04:44,230
It then performs another iteration on the second table and returns three, which is two plus one, so

50
00:04:44,230 --> 00:04:47,930
each iteration is performed on the latest return table.

51
00:04:48,730 --> 00:04:50,290
They then combine together.

52
00:04:51,270 --> 00:04:58,230
The iteration stops when NT becomes equal to four as per the where clause in the recursive clause.

53
00:05:00,730 --> 00:05:07,210
In our final select statement, we return the CTY, which has entered as one, two and three.

54
00:05:08,780 --> 00:05:16,820
As I mentioned in the previous example, if I didn't specify in as less than four as per the where clause

55
00:05:16,820 --> 00:05:18,350
in the recursive sub query.

56
00:05:19,550 --> 00:05:21,410
Then we would have an infinite loop.

57
00:05:22,430 --> 00:05:23,120
Similarly.

58
00:05:24,070 --> 00:05:30,760
If I had to join clause in the recursive query to be on onewhere was equal to and then we would always

59
00:05:30,760 --> 00:05:34,120
return a match and the loop would just keep going.

60
00:05:34,870 --> 00:05:41,270
Whereas when we match manager Editta to employee ID, we stop when there are no more managers left.

61
00:05:42,070 --> 00:05:45,370
So you must be careful to avoid infinite loops.

62
00:05:47,050 --> 00:05:48,510
So let's do some examples.

63
00:05:49,270 --> 00:05:53,650
First, I'm going to create a scalar table with just the value of one.

64
00:05:54,650 --> 00:06:05,570
In a column called End, so I'll type create table, scale the table and I'll give it one quarter of

65
00:06:05,570 --> 00:06:09,140
an integer data type, then insert.

66
00:06:12,400 --> 00:06:18,360
Into the table, the value of one.

67
00:06:19,600 --> 00:06:21,310
So first, I'll execute this.

68
00:06:25,040 --> 00:06:27,560
And then I'll execute the entire command.

69
00:06:29,880 --> 00:06:31,350
So let's clear the table.

70
00:06:38,500 --> 00:06:41,470
So now I want to create a recursive cty.

71
00:06:42,710 --> 00:06:51,410
That references this scale table and contains the values from one three to five, to do that, I'll

72
00:06:51,410 --> 00:07:01,400
type with Give my city a name of qty, underscore five, give it one column of N and type as followed

73
00:07:01,400 --> 00:07:07,100
by the anchor query, which is select and from the scalar

74
00:07:09,560 --> 00:07:22,840
table union or to my recursive clause which will be select and plus one from cty underscore five where

75
00:07:22,880 --> 00:07:25,010
and is less than five.

76
00:07:27,940 --> 00:07:37,300
So this is my Uncle Claus and this is my recursive clause, the recursive clause references the city,

77
00:07:38,050 --> 00:07:47,590
the anchor clause creates the anchor table, which is used in the first iteration, and this query contains

78
00:07:47,590 --> 00:07:48,580
just the value one.

79
00:07:49,920 --> 00:07:57,210
So in the first iteration, one plus one will be two, and then in the second iteration, that value

80
00:07:57,210 --> 00:08:02,380
of two will have one added to it and will keep going until the end is less than five.

81
00:08:03,450 --> 00:08:04,890
We then select.

82
00:08:06,770 --> 00:08:08,420
Records from.

83
00:08:10,070 --> 00:08:11,840
Our recursive cty.

84
00:08:15,000 --> 00:08:18,900
And as you can see, we return the records one three to five.

85
00:08:20,430 --> 00:08:23,670
Now, let's see what happens if I remove the workload's.

86
00:08:26,010 --> 00:08:32,100
So we're no longer limiting our results, so close parentheses and hit run.

87
00:08:34,010 --> 00:08:37,760
We now get an infinite loop, which results in an error.

88
00:08:40,030 --> 00:08:47,170
OK, so now let's do an example where I'm going to show you how to use recursive CTD instead of the

89
00:08:47,170 --> 00:08:54,160
hierarchical sub queries in the previous section, if I want you to find all the direct and indirect

90
00:08:54,160 --> 00:09:06,160
reports for Blak and clav using hierarchical queries, as you know, I would type select Mpondo name

91
00:09:06,820 --> 00:09:23,650
manager from and start with Inamed in Blake and Clark and I would connect by Priya.

92
00:09:25,180 --> 00:09:27,460
Employee equals manager.

93
00:09:32,400 --> 00:09:32,850
Hey.

94
00:09:34,330 --> 00:09:37,690
Are all of our reports for Blake?

95
00:09:38,800 --> 00:09:47,140
And for Claire Miller reports to Clark and Allan Ward, Martin Turner and James reportedly now let's

96
00:09:47,140 --> 00:09:51,130
get a similar result using recursive CTD.

97
00:09:52,760 --> 00:10:03,370
So I would type with and I'll call it CTE underscore and and I'll give it three columns and put in your

98
00:10:03,380 --> 00:10:07,820
name and manager and I'll define it as.

99
00:10:09,260 --> 00:10:21,350
And in my anchor query, I will first select employees, you name and manager from Ms where Inamed in.

100
00:10:24,310 --> 00:10:24,880
Blake.

101
00:10:28,280 --> 00:10:39,380
And Clark, so this is my Uncle Claus, Isleton union, all I need, my recursive clause, I will select

102
00:10:40,250 --> 00:10:40,660
AMPE.

103
00:10:45,420 --> 00:10:47,190
AMP took in.

104
00:10:48,630 --> 00:11:00,000
And DOT manager from Qty underscore AMP Buy will join it on the AMP table.

105
00:11:01,830 --> 00:11:04,170
On Qty, underscore and.

106
00:11:05,720 --> 00:11:06,650
To improve.

107
00:11:08,430 --> 00:11:10,950
Beatles manager.

108
00:11:12,520 --> 00:11:19,150
And I will then select staff from Qty on this call, and so let's analyze this.

109
00:11:20,530 --> 00:11:23,710
The anchor query returns just like and clock.

110
00:11:25,980 --> 00:11:26,820
As you can see.

111
00:11:29,050 --> 00:11:36,240
So this is what the first iteration of the recursive clause will be done on, so we should get all of

112
00:11:36,250 --> 00:11:39,890
Blake's direct reports and all of Clarke's direct reports.

113
00:11:40,570 --> 00:11:43,690
This is because the recursive clause is looking at.

114
00:11:44,640 --> 00:11:51,510
The CTM table and joining it on the table where the No.

115
00:11:52,700 --> 00:11:57,260
Is equal to those employees where their manager is Blake clerk.

116
00:11:58,960 --> 00:12:00,550
So now when I run this.

117
00:12:01,680 --> 00:12:10,290
You can see this returns the same results as we got previously with a hierarchical sub query, although

118
00:12:10,290 --> 00:12:16,260
it's in a slightly different order, you have Blakelock on the top and all of their direct reports in

119
00:12:16,260 --> 00:12:17,400
the second iteration.

120
00:12:20,310 --> 00:12:28,590
OK, now what if I wanted to find out all of the employees who report into King as well as the employees

121
00:12:28,980 --> 00:12:34,950
who report into those reports until we have no more direct reports?

122
00:12:38,160 --> 00:12:42,960
Well, I can type here where manager is now.

123
00:12:44,820 --> 00:12:51,860
So this will return came as the inquiry because remember, King does not have a manager.

124
00:12:55,570 --> 00:13:03,480
And what I'd also do is I'll add another column for and this will show us what the iteration will be

125
00:13:03,490 --> 00:13:09,180
on for the anchor anchor clause, I'll give it one, because remember, that's the first iteration.

126
00:13:10,210 --> 00:13:16,810
And then for the subsequent recursive clause, I will give it and plus one.

127
00:13:16,960 --> 00:13:20,500
So Qty underscore m dot and.

128
00:13:21,740 --> 00:13:22,250
Plus one.

129
00:13:24,430 --> 00:13:37,300
So we now have four iterations, the first iteration will be fixing, and then we have the people who

130
00:13:37,300 --> 00:13:45,310
report into King, which is Blakelock and Jones, then we have the people who report into Blakelock

131
00:13:45,430 --> 00:13:46,120
and Jones.

132
00:13:47,570 --> 00:13:56,060
And then for the fourth iteration, we have Adams and Smith who report into Scott and Ford, and after

133
00:13:56,060 --> 00:14:03,440
that, Adams and Smith are not managers, so their manager right cannot be found and hence the iteration

134
00:14:03,440 --> 00:14:04,040
stops.

135
00:14:05,300 --> 00:14:09,580
So these examples were to show you how recursive keys can be useful.

136
00:14:11,030 --> 00:14:21,950
Now, one final thing, if I change this join to be on an equal, Zampino will return an infinite loop.

137
00:14:25,080 --> 00:14:28,540
As will always be able to match the employee with Yamoto.

138
00:14:30,380 --> 00:14:38,780
So the way you structure your recursive key is crucial and it will take you some time to get your head

139
00:14:38,780 --> 00:14:41,810
around this, but I suggest you keep practicing.
