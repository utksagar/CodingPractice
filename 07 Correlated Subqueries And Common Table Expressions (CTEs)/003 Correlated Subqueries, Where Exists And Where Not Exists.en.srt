1
00:00:01,860 --> 00:00:06,470
Accumulated sub query contains a reference to a table in the outer query.

2
00:00:07,680 --> 00:00:13,650
As I mentioned in the previous lecture, in a normal sub query, the inner sub queries run first and

3
00:00:13,650 --> 00:00:17,730
execute once they return values for the outer sub query.

4
00:00:18,830 --> 00:00:24,980
But in a correlated some query, the sub query is executed for each of the outer query.

5
00:00:27,150 --> 00:00:33,090
Correlated sub queries can be used when the sub query needs to return a different result for each row

6
00:00:33,090 --> 00:00:34,110
in the out to query.

7
00:00:34,500 --> 00:00:36,360
And I'll show you an example, surely.

8
00:00:37,460 --> 00:00:44,540
Correlated sub queries can be used with logical operators and within any and all operators.

9
00:00:47,840 --> 00:00:50,570
Let's query the eBay underscore countries table.

10
00:01:00,960 --> 00:01:05,940
As you can see, a lot of countries do not have intermediate region IDs.

11
00:01:07,110 --> 00:01:13,230
So let's do a correlated sub query where we only return those countries where there is an intermediate

12
00:01:13,230 --> 00:01:25,260
region ID so I can type select a dot star from the Franchesco countries alias this as a.

13
00:01:26,840 --> 00:01:32,480
We're into media region wide.

14
00:01:34,850 --> 00:01:48,740
And I should type I should qualify this equals select p dot, Heidi from eBay, underscore country.

15
00:01:49,190 --> 00:01:51,410
Underscore intermediate.

16
00:01:52,830 --> 00:01:54,420
Be where?

17
00:01:55,590 --> 00:02:00,000
A toe into media on the school region, on the school I.D..

18
00:02:01,460 --> 00:02:04,430
Equals speed and terminate.

19
00:02:05,120 --> 00:02:11,810
So what we're saying here is select countries from the Ebor countries table where the intermediate region,

20
00:02:11,810 --> 00:02:17,090
it is equal to one of the ID fields in the EPA.

21
00:02:17,120 --> 00:02:18,170
Underscore country.

22
00:02:18,170 --> 00:02:20,150
Underscore intermediates table.

23
00:02:21,620 --> 00:02:26,210
Now, if I query this in a sub query before the where clause.

24
00:02:28,730 --> 00:02:33,980
What we're saying is here are a list of all of the intermediate region IDs.

25
00:02:35,310 --> 00:02:39,780
And we're taking this from the EPA, this underscore country underscore intermediates table.

26
00:02:41,780 --> 00:02:45,740
Now for the first record of the Ebor on this country's table.

27
00:02:48,680 --> 00:02:55,280
Which is Afghanistan, and it doesn't have a region, it is it will execute this record first and it

28
00:02:55,280 --> 00:03:01,550
will try to replace a door intermediate region here as no equals.

29
00:03:01,550 --> 00:03:04,460
B, do it so this won't return any records.

30
00:03:05,360 --> 00:03:09,920
But when we get to a country that does have an intermediate region like Angola.

31
00:03:11,860 --> 00:03:14,260
This will take 80 for this record.

32
00:03:15,460 --> 00:03:22,210
It will substitute it in this reference, which is referencing the outer table, and it will say select

33
00:03:22,300 --> 00:03:31,330
ID from into Ebor Country Intermediate where 80 equals ID and therefore this workforce will select this

34
00:03:31,330 --> 00:03:31,810
record.

35
00:03:49,360 --> 00:03:56,470
So what we're essentially saying is select countries from the countries table where the region is in

36
00:03:56,470 --> 00:04:04,330
the intermediate region ID field in the outer table is equal to the ID field in the inner subquery table.

37
00:04:05,710 --> 00:04:07,270
So let's analyze the results.

38
00:04:10,580 --> 00:04:17,030
So, as I said, what happens is that for every single room, one at a time in the undisclosed countries

39
00:04:17,030 --> 00:04:22,700
table, the intermediate region ID value is passed onto the sub query.

40
00:04:25,340 --> 00:04:28,190
Here, as you can see, the reference is for tabbouleh.

41
00:04:30,040 --> 00:04:33,750
So for a first result here, the value A-T was posted.

42
00:04:34,240 --> 00:04:38,620
And since we have 80 in this record here, we had a match.

43
00:04:40,860 --> 00:04:47,370
As you can see, so in our sub query, only records where the I.T. field was 80.

44
00:04:48,580 --> 00:04:49,300
Was returned.

45
00:04:50,810 --> 00:04:58,340
And hence, the no returned was the scale value here, poverty, so let it run again.

46
00:05:03,320 --> 00:05:08,330
And so this record was returned, so that's how the correlated subquery worked.

47
00:05:12,230 --> 00:05:19,960
We can also use the where exists and where not exists clauses with correlated sub queries where exists

48
00:05:20,030 --> 00:05:26,210
is used to test the existence of any record in a sub query and returns true if the record exists.

49
00:05:26,510 --> 00:05:34,200
So in a correlated subquery wallaroos in the outer query that result in a true in the sub query are

50
00:05:34,220 --> 00:05:34,790
returned.

51
00:05:35,900 --> 00:05:43,640
Where not exists is used to test the nonexistence of any record in a sub query, it returns true if

52
00:05:43,640 --> 00:05:45,200
the record doesn't exist.

53
00:05:47,090 --> 00:05:50,840
These clauses are usually used with correlated sub queries.

54
00:05:52,850 --> 00:05:56,120
OK, so let's do another example using the same.

55
00:05:57,160 --> 00:06:01,720
EPA under four countries table and let's modify this existing example.

56
00:06:03,400 --> 00:06:10,330
So let's replace this with where it exists and get rid of the equals operator.

57
00:06:11,800 --> 00:06:17,470
So what we're doing here is we're still referencing a column from the out to query.

58
00:06:20,470 --> 00:06:29,020
And we're saying basically, if the intermediate region ID field from the EPA countries table.

59
00:06:31,380 --> 00:06:39,000
Equals the ID field from the FBI undiscovered country underscore intermediates table for the particular

60
00:06:39,000 --> 00:06:44,250
record, then this will return true and that record will be displayed.

61
00:06:45,890 --> 00:06:52,160
And it doesn't really matter what I select in the columns, because the sub crew is just testing for

62
00:06:52,160 --> 00:06:56,780
existence, so I could just write one if I wanted to and if I hit run.

63
00:06:59,130 --> 00:07:01,050
We return the same results.

64
00:07:01,260 --> 00:07:09,000
And in this way, close, if I now type where one equals one, I will return every record.

65
00:07:10,470 --> 00:07:12,360
Let me just close the parenthesis first.

66
00:07:14,200 --> 00:07:20,710
I will now return every record because for each record in this top query, one will always equal one,

67
00:07:21,010 --> 00:07:22,930
so every record will be displayed.

68
00:07:23,890 --> 00:07:29,610
If I know right and one equals to two, I'll return no records because one never equals two.

69
00:07:30,130 --> 00:07:31,120
So no records will.

70
00:07:31,120 --> 00:07:32,260
This will be displayed.

71
00:07:33,990 --> 00:07:41,700
Now, let me return only those countries with no intermediate region regionality so I can change this,

72
00:07:41,700 --> 00:07:52,320
we're close to where not exists and I can right where a intermediate region I'd be to I'd.

73
00:07:58,840 --> 00:08:00,100
Close parenthesis again.

74
00:08:02,200 --> 00:08:06,610
And now we return only those results with no intermediate regionality.

75
00:08:09,890 --> 00:08:13,550
OK, so that was a lecture on correlated sub queries.
