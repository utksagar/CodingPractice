1
00:00:01,860 --> 00:00:04,230
Let's go over the analytical window functions.

2
00:00:05,160 --> 00:00:11,940
Let's start with the lack function, the lack function returns a value from a previous role off the

3
00:00:11,940 --> 00:00:12,420
table.

4
00:00:13,180 --> 00:00:15,060
It takes in three parameters.

5
00:00:15,930 --> 00:00:18,090
The first parameter is the expression.

6
00:00:19,290 --> 00:00:26,910
This can be a field like population or name, and it can also include a field that has an inbuilt function

7
00:00:26,940 --> 00:00:27,660
applied to it.

8
00:00:29,750 --> 00:00:32,990
Second parameter is the offset by default.

9
00:00:33,050 --> 00:00:37,600
This is one meaning that it takes the value from the previous row.

10
00:00:38,090 --> 00:00:42,560
If you typed two, it would take the value from two rows above the current.

11
00:00:44,650 --> 00:00:51,980
The third parameter is the value to display if there are no previous values by default.

12
00:00:52,030 --> 00:00:52,810
This is No.

13
00:00:54,680 --> 00:01:00,920
The lack analytic function should also have an order by inside the overlords, if you're using Oracle

14
00:01:01,700 --> 00:01:07,730
for other database management systems such as MySQL, you may not need to specify an order by clause.

15
00:01:07,970 --> 00:01:11,360
It just depends based on what database management system you're using.

16
00:01:11,660 --> 00:01:13,630
Different ones will have different requirements.

17
00:01:16,620 --> 00:01:23,730
OK, so let's revisit the country's table, let's select the field, name and population and apply the

18
00:01:23,730 --> 00:01:25,560
like function on the name field.

19
00:01:26,670 --> 00:01:37,800
So I'll select a name which is a country name population, and I apply like to the name field and the

20
00:01:37,800 --> 00:01:38,330
overlord's.

21
00:01:39,000 --> 00:01:46,440
And remember, we need to specify an order by when using the over clause, so I'll order by name.

22
00:01:47,940 --> 00:01:51,180
Now I'm just using one parameter in my like function.

23
00:01:54,330 --> 00:01:58,110
From EPA and school countries.

24
00:02:01,150 --> 00:02:01,840
And here on.

25
00:02:05,130 --> 00:02:08,700
OK, so you can see from my results.

26
00:02:09,740 --> 00:02:10,580
In to.

27
00:02:12,300 --> 00:02:20,010
We have Afghanistan in our light column and we can see the previous role for the name column is Afghanistan.

28
00:02:21,620 --> 00:02:24,710
In the first row, we have a null value.

29
00:02:26,740 --> 00:02:30,400
This is because when you're on the first row, there are no values above it.

30
00:02:31,680 --> 00:02:33,970
OK, so let's do another example.

31
00:02:33,990 --> 00:02:34,290
Now.

32
00:02:35,290 --> 00:02:43,030
And in the second parameter of the leg function, which is its offset, let's talk to so note that we

33
00:02:43,030 --> 00:02:49,180
did not specify a second parameter in the leg function in this analytical function and therefore the

34
00:02:49,180 --> 00:02:50,470
default value was one.

35
00:02:51,670 --> 00:02:57,510
So I'll type like name to over order by name.

36
00:02:59,950 --> 00:03:00,490
And here.

37
00:03:04,400 --> 00:03:12,110
From our results, we can now see that in our second like call we have to Noles as the offset is to

38
00:03:12,560 --> 00:03:14,520
and Afghanistan is now in the third row.

39
00:03:14,810 --> 00:03:21,020
So if we're in the third row and we go to above, we have Afghanistan and then again, everything is

40
00:03:21,020 --> 00:03:21,470
offset.

41
00:03:22,340 --> 00:03:23,890
So let's do one more example.

42
00:03:24,380 --> 00:03:30,920
And this time in the third parameter of the leg function, we will change the default value to blank.

43
00:03:34,490 --> 00:03:42,890
So we just copy this and now in the third parameter, I will type blank.

44
00:03:44,640 --> 00:03:50,910
And so now, instead of the nulls, the default value that's populated is blank.

45
00:03:54,770 --> 00:04:01,400
The lead function is just the opposite of the leg function, the syntax is the same apart from typing

46
00:04:01,400 --> 00:04:02,780
like you type lead.

47
00:04:04,140 --> 00:04:08,310
And instead of returning the previous rose value, it returns the following news value.

48
00:04:09,810 --> 00:04:10,290
OK.

49
00:04:11,980 --> 00:04:15,190
So let's change our flag queries to lead

50
00:04:22,060 --> 00:04:22,710
a..

51
00:04:25,860 --> 00:04:32,460
And as I said, instead of the previous values, it takes the next values, so the first rule in our

52
00:04:32,460 --> 00:04:34,950
first live column, we have Albania.

53
00:04:37,000 --> 00:04:38,880
Which is the next problem down.

54
00:04:40,330 --> 00:04:46,510
And here we have Algeria, which is the second column down, and remember in our second query we specified

55
00:04:46,510 --> 00:04:47,350
the default is two.

56
00:04:49,000 --> 00:04:55,090
If we scroll all the way down the table, we can see that the nulls and the blanks are populated at

57
00:04:55,090 --> 00:04:55,440
the end.

58
00:04:55,750 --> 00:05:01,120
And that is because after Ã…land Islands, there are no values.

59
00:05:04,420 --> 00:05:09,200
The entire function divides the rows as equally as possible within each partition.

60
00:05:10,390 --> 00:05:13,470
It takes one parameter, which is for the number of groups.

61
00:05:14,230 --> 00:05:21,250
It must also be used with the order by clause because it is the values in the columns or expression

62
00:05:21,250 --> 00:05:24,430
used in the order by clause that will determine the groupings.

63
00:05:25,330 --> 00:05:29,800
So let's use the entire function to divide the field into three groups.

64
00:05:30,770 --> 00:05:36,680
So let me delete this and we'll type.

65
00:05:38,420 --> 00:05:52,490
Name population and then entitled and I'll specify three groups over older by population and here.

66
00:05:55,090 --> 00:06:00,490
Now our data is altered by population and we have one.

67
00:06:05,630 --> 00:06:06,260
Group to.

68
00:06:10,060 --> 00:06:18,070
And then finally, Group three, so the three groups have been as evenly distributed as possible based

69
00:06:18,070 --> 00:06:27,370
on the ordering of population that we've specified, if we were to partition by region, I'd.

70
00:06:31,610 --> 00:06:34,850
And if I was tied for each night as a field.

71
00:06:37,630 --> 00:06:42,070
We would have three groups specified for each partition.

72
00:06:44,170 --> 00:06:46,740
And then once we get to the next partition, we start again.

73
00:06:50,870 --> 00:06:53,000
If I change this to untill five.

74
00:06:55,830 --> 00:06:56,670
We now have.

75
00:06:58,320 --> 00:07:03,510
Five groups partitioned as evenly as possible based on the population order.

76
00:07:05,900 --> 00:07:11,300
The end value function brings the value within an analytic window.

77
00:07:12,020 --> 00:07:13,430
It takes two parameters.

78
00:07:15,150 --> 00:07:25,230
The column or the expression you wish to return and the end value unlikely like lead or entail functions,

79
00:07:25,420 --> 00:07:27,690
you don't need to use the order by clause.

80
00:07:29,550 --> 00:07:34,320
So let's return the value from the name column.

81
00:07:35,490 --> 00:07:46,470
So I'll select name, population and value and I'll specify the name field.

82
00:07:49,270 --> 00:07:56,140
And the second value is what I wish to return and apply the over clause.

83
00:07:58,150 --> 00:08:02,040
So we're using the entire table as our window frame.

84
00:08:08,290 --> 00:08:11,260
He just thinks that.

85
00:08:15,440 --> 00:08:23,720
Now, as you can see, the second venue is Isle of Man, and that is what we return in our value column.

86
00:08:27,290 --> 00:08:34,400
Now, let's use a partition and partition this by region and

87
00:08:38,280 --> 00:08:43,520
let me add region here and here.

88
00:08:45,290 --> 00:08:50,360
So now the second value in the partition for region and 10 is Martinek.

89
00:08:54,310 --> 00:08:59,140
The second value for the partition of Region 20 is Isle of Man.

90
00:09:01,450 --> 00:09:05,620
And then for 30, it's Japan and so on.

91
00:09:07,460 --> 00:09:11,440
OK, so that was a lecture on some of the main analytical functions.

92
00:09:11,770 --> 00:09:13,030
I hope you found it useful.
